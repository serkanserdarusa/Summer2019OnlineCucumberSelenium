Today is 1/2/2020

	Agenda:

		Maven
		How to run tests in parallel

########################################

			mvn test

How java web application works?

Source Code
compile
test
deploy .jar/.war file to application server
run it on application server

What is application server? - program that runs web application and makes it available for user via browser. For example Tomcat, JBoss, Jetty, etc.

Maven - is a project build tool.

But maven, it's not only one build tool for java, there is also Ant and Gradle.

Deployment - it's a process of delivering new version of software to the application server.

Release - it's a process of delivering new version of software to the end-user.

Maven helps us to automate all processes starting from compiling project and till deployment.

web service - it's an application, that process some data and works through web.

application server - it's a software that hosts web service.

Also, maven responsible for dependencies.

dependencies helps us to easily add libraries and be independent from IDE.

IDE - Eclipse, Intellij, Netbeans

Maven, makes our project independent from IDE. We can run tests without IDE.

Mac it's a UNIX OS, it has totally different composition than WINDOWS.
You cannot use same commands as me in Powershell or CMD, so just open GIT BASH (WINDOWS ONLY) and we will be on the same track.

Sublime - it's a text editor.

In terminal you can use vim or nano to edit files.

CONTROL + C - to stop anything in terminal.

Before running any maven life-cycle command in terminal, you must be in the same folder with your pom.xml

For Windows: open your project folder --> right click on empty space --> git bash here

For Mac: run pwd to get path of current location, or just drag and drop project folder into terminal to get path to it. put cd before to navigate there.

mvn - is not recognized | YOU DON'T HAVE MAVEN ISNTALLED


Maven default lifecycles

❏ validate - validate the project is correct and all necessary information is available
❏ compile - compile the source code of the project
❏ test - test the compiled source code using a suitable unit testing
framework
❏ verify - run any checks to verify the package is valid and meets quality
criteria

clean - remove all files generated by the previous build

install - copy .jar file to local maven repository
deploy - send it to remote repository

mvn verify -Dcucumber.options="--tags @driver_with_data_table"

or

mvn test -Dcucumber.options="--tags @driver_with_data_table"

-Dcucumber.options="--tags @sometag" - provide scenarios that you want to run. No need to change CucumberRunner class.

It overrides runner class configuration.

If you see at the end BUILD SUCCESS

That means all maven goals were executed and project is ready to use.

If CucumberRunner didn't fail, there is nothing to execute for FailedRunner. But, the problem is that they share reports. Thus, cucumber.json file will be overridden by FailedRunner and it will be empty.


 mvn clean verify -Dcucumber.options="--tags @driver_with_data_table" - run tests with @driver_with_data_table tag

clear - to clear terminal







